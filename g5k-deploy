#!/usr/bin/env python

# example command lines
#
# - for deploying a default environment:
#
#   g5k-deploy -c "{'user':'root','ssh':'sshpass','ssh_options':('-pgrid5000','ssh','-o','StrictHostKeyChecking=no','-o','UserKnownHostsFile=/dev/null','-o','ConnectTimeout=20')}" -CEXECO -e lenny-x64-base -j XXXXXX
#
# - for deploying a production environment on a cluster (TODO: fix connexion_params)
#
#   g5k-deploy -c "{'user':'root','ssh':'sshpass','ssh_options':('-pgrid5000','ssh','-o','StrictHostKeyChecking=no','-o','UserKnownHostsFile=/dev/null','-o','ConnectTimeout=20')}" -CKAENV -e debian-x64-5-prod capricorne

import execo, execo_g5k, optparse, logging, re, tempfile, fileinput, shutil, sys
g5k_api = False
try:
    import g5k_api_tools
    g5k_api = True
except:
    pass

logger = logging.getLogger("execo.g5k-deploy")

usage = "usage: %prog <-e env_name>|<-a env_file> <space separated list of fqdn nodes or clusters to deploy>"
description = """Deploy an environment, with kadeploy3, to Grid5000 nodes.  The nodes
to deploy can be given explicitely or automatically retrieved by oar
job id, oargrid job id, or cluster name (the latter for deploying a
whole cluster. Needs g5k_api_tools and python rest client)."""
epilog = """Check method selects the way to decide if a node has been successfully
deployed.  Three methods are: KADEPLOY: the default, relies on
kadeploy3 to know which nodes where successfully deployed. EXECO:
connect (with the given connexion_params) to the nodes and run the
execo supplied check command (see:
execo_g5k.g5k_configuration['check_deployed_command']) to decide if
the node was deployed. KAENV: connect (with the given
connexion_params) to the nodes and compare ENV_DATE in
/etc/kaenv/kaenv of the image and on the node. Correct
connexion_params are mandatory for EXECO and KAENV check methods.
"""
parser = optparse.OptionParser(usage = usage,
                               description = description,
                               epilog = epilog)
parser.add_option("-n",
                  dest = "num_tries",
                  help = "number of deployment tries. Default = %default",
                  type = "int",
                  default = 3)
parser.add_option("-e",
                  dest = "env_name",
                  help = "environment name",
                  default = None)
parser.add_option("-a",
                  dest = "env_file",
                  help = "environment file",
                  default = None)
parser.add_option("-j",
                  dest = "job_id",
                  help = "oar job id, as a single int for local job, or as a tuple site,job_id for jobs on other sites. This option can be given multiple times",
                  action = "append", type = "string")
parser.add_option("-g",
                  dest = "grid_job_id",
                  help = "oargrid job id. This option can be given multiple times",
                  action = "append",
                  type = "int")
parser.add_option("-c",
                  dest = "connexion_params",
                  help = "connexion parameters. Default = %default",
                  default = None)
parser.add_option("-C",
                  dest = "check_method",
                  help = "check method. can be KADEPLOY, EXECO, KAENV. Default = %default",
                  choices = ("KADEPLOY", "EXECO", "KAENV"),
                  default = "KADEPLOY")
parser.add_option("-k",
                  dest = "kadeploy_opts",
                  help = "additional kadeploy3 options. Default = %default",
                  default = None)
parser.add_option("-v",
                  dest = "verbose",
                  help = "verbose",
                  action = "store_true",
                  default = False)
parser.add_option("-d",
                  dest = "debug",
                  help = "debug",
                  action = "store_true",
                  default = False)
(options, args) = parser.parse_args()

if options.verbose:
    execo.logger.setLevel(logging.INFO)
if options.debug:
    options.verbose = True
    execo.logger.setLevel(logging.DEBUG)

connexion_params = execo.default_connexion_params.copy()
if options.connexion_params:
    cmdline_connexion_params = eval(options.connexion_params)
    for k in cmdline_connexion_params.keys():
        connexion_params[k] = cmdline_connexion_params[k]

if g5k_api:
    hostnames = set([ arg for arg in args if arg.find(".") != -1 ])
    for cluster in set(args).difference(hostnames):
        hostnames.update(g5k_api_tools.get_cluster_hosts(cluster))
else:
    hostnames = args
if options.job_id:
    for job in options.job_id:
        if job.find(',') == -1:
            job_id = int(job)
            hostnames.update([host.address for host in execo_g5k.get_oar_job_nodes(job_id)])
        else:
            (site, sep, job_id) = job.partition(',')
            job_id = int(job_id)
            hostnames.update([host.address for host in execo_g5k.get_oar_job_nodes(job_id, site)])
if options.grid_job_id:
    for gridjob in options.grid_job_id:
        hostnames.update([host.address for host in execo_g5k.get_oargrid_job_nodes(gridjob)])
    
if len(hostnames) == 0:
    print "empty list of hosts!"
    parser.print_help()
    exit(1)

deployment_spec = execo_g5k.Deployment(hosts = [ execo.Host(hostname) for hostname in hostnames ],
                                       env_name = options.env_name,
                                       env_file = options.env_file,
                                       other_options = options.kadeploy_opts)
logger.info("deployment: %s" % (deployment_spec,))

check_deployed_command = None
if options.check_method == "KAENV":
    # prepare a check_deployed_command which checks that the line
    # ENV_DATE in /etc/kaenv/kaenv of the deployed environment is the
    # same as the one contained in the image tgz.
    logger.info("KAENV check method:")
    image_stamp = None
    env_dsc = None
    image_path = None
    image_type = None
    if deployment_spec.env_file: # if the env is a dsc file
        logger.info("reading env description file %s" % (deployment_spec.env_file,))
        env_dsc = open(deployment_spec.env_file, "r").read()
    elif deployment_spec.env_name: # or if it is registered to kenv3
        logger.info("reading env description %s" % (deployment_spec.env_name,))
        env_dsc = execo.Process("kaenv3 -u $(kaenv3 -l | grep ^debian-x64-5-prod | awk \"{print \$3}\") -p $(kaenv3 -l | grep ^debian-x64-5-prod | awk \"{print \$1}\")").run().stdout()
    # get the image tgz and its type (only tgz handled here)
    if env_dsc:
        mo = re.search("^tarball : ([^|]*)\|(.*)", env_dsc, re.MULTILINE)
        if mo:
            (image_path, image_type) = mo.groups()
            logger.info("image type = %s image path = %s" % (image_type, image_path))
    else:
        logger.error("unable to read environment description")
        exit(1)
    if image_path and image_type == 'tgz':
        # unpack /etc/kaenv/kaenv from image tgz and get content of line ENV_DATE
        unpack_dir = tempfile.mkdtemp()
        logger.info("extracting /etc/kaenv/kaenv from %s in %s" % (image_path, unpack_dir))
        execo.Process("tar x -zC %s -f %s etc/kaenv/kaenv" % (unpack_dir, image_path)).run()
        for line in fileinput.input(unpack_dir + "/etc/kaenv/kaenv"):
            if re.search("^ENV_DATE=", line):
               image_stamp = line.rstrip('\n')
        shutil.rmtree(unpack_dir)
    else:
        if not image_path:
            logger.error("unable to get image path")
        if image_type != "tgz":
            logger.error("unhandled image type")
        exit(1)
    if image_stamp:
        check_deployed_command = 'cat /etc/kaenv/kaenv | grep -F \'%s\'' % image_stamp
        logger.info("before and after deployment, will check that /etc/kaenv/kaenv contains the line %s" % (image_stamp,))
    else:
        logger.error("unable to get image stamp")
        exit(1)
elif options.check_method == "KADEPLOY":
    check_deployed_command = None
elif options.check_method == "EXECO":
    check_deployed_command = True
else:
    print "unknown deploy check method %s" % (options.check_method,)
    parser.print_help()
    exit(1)

logger.info("starting deployment(s) with retries")
(deployed, undeployed) = execo_g5k.deploy(
    deployment_spec,
    connexion_params = connexion_params,
    check_deployed_command = check_deployed_command,
    num_deploy_retries = options.num_tries,
    out = options.verbose)
logger.info("deployment(s) finished")

print "deployed = %s" % (deployed,)
print "undeployed = %s" % (undeployed,)
