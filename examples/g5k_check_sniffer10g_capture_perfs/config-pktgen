#!/bin/bash

set -e

PACKET_SIZE=1500
PACKET_COUNT=2000000
DELAY_BEFORE_START=0

usage() {
    cat <<EOF
usage: `basename $0` [option(s)] <command> <command_parameters>

commands are:

  config: configure pktgen

    parameters:

      <destination> : IP or name of destination

    options:

      -p <size> : packet size
         (default: $PACKET_SIZE)

      -c <number> : max number of packets to send or 0
         (default: $PACKET_COUNT)

  start: start pktgen

    parameters:

      <length> : length of generation in seconds

    options:

      -d <delay> : delay in seconds before starting pktgen

EOF
}

while getopts "p:c:d:" OPTION
do
    case $OPTION in
        p) PACKET_SIZE="$OPTARG" ;;
        c) PACKET_COUNT="$OPTARG" ;;
        d) DELAY_BEFORE_START="$OPTARG" ;;
        *) usage ; exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

if [ "$#" -lt "1" ] ; then
    usage ; exit 1
fi

pgset() {
    PROCIF=/proc/net/pktgen/$1
    echo -n "writing \"$2\" to $PROCIF"
    echo "$2" > $PROCIF
    RESULT=$(sed -ne 's/^Result: \(.*\)$/\1/p' < $PROCIF)
    echo " result = $RESULT"
}

status() {
    echo "pktgen status:"
    echo "/proc/net/pktgen/pgctrl:"
    cat /proc/net/pktgen/pgctrl
    echo "/proc/net/pktgen/kpktgend_0:"
    cat /proc/net/pktgen/kpktgend_0
    CURRENT_DEVICE=$(sed -ne 's/^.*: \(eth[0-9]\+\) *$/\1/p' < /proc/net/pktgen/kpktgend_0)
    echo "/proc/net/pktgen/$CURRENT_DEVICE:"
    cat /proc/net/pktgen/$CURRENT_DEVICE
}

config() {

    DEST=$1
    if [ "x$DEST" == "x" ] ; then
        echo "error, must have a destination"
        exit 1
    fi

    echo "configuring pktgen..."

    if [ "x$(echo $DEST | sed -n '/^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$/p')" == "x$DEST" ] ; then
        IP_DST=$DEST
    else
        IP_DST=$(host $DEST | sed -n 's/^.*[[:space:]]\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)$/\1/p')
        if [ "x$IP_DST" == "x" ] ; then
            echo "error, unable to resolve $DEST"
            exit 1
        fi
    fi

    # which device do we go through?
    DEVICE=$(ip -o -f inet route get $IP_DST | sed -n 's/^.* dev \([a-zA-Z0-9]\+\) .*$/\1/p')
    if [ "x$DEVICE" == "x" ] ; then
        echo "error, unable to get device to route packets through"
        exit 1
    fi

    # do we reach destination directly or through a gateway?
    if (ip -o -f inet route get $IP_DST | grep -q via) ; then
        NEXTHOPIP=$(ip -o -f inet route get $IP_DST | sed -n 's/^.* via \([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\) .*$/\1/p')
        if [ "x$NEXTHOPIP" == "x" ] ; then
            echo "error, unable to get next hop ip"
            exit 1
        fi
    else
        NEXTHOPIP=$IP_DST
    fi

    # get arp entry
    ip -o -f inet neigh flush $NEXTHOPIP || true
    ping -c 1 $NEXTHOPIP > /dev/null

    # get mac address of next hop
    NEXTHOPIPREGEX="^$(echo $NEXTHOPIP | sed 's/\./\\\./g')[[:space:]]"
    NEXTHOPMAC=$(ip -o -f inet neigh show | grep "$NEXTHOPIPREGEX" | sed -n 's/^.* \([0-9a-zA-Z][0-9a-zA-Z]:[0-9a-zA-Z][0-9a-zA-Z]:[0-9a-zA-Z][0-9a-zA-Z]:[0-9a-zA-Z][0-9a-zA-Z]:[0-9a-zA-Z][0-9a-zA-Z]:[0-9a-zA-Z][0-9a-zA-Z]\).*$/\1/p' | head -n 1 )
    if [ "x$NEXTHOPMAC" == "x" ] ; then
        echo "error, unable to get next hop mac"
        exit 1
    fi

    echo "pktgen will send packets to:"
    echo "  ip           = $IP_DST"
    echo "  device       = $DEVICE"
    echo "  next hop ip  = $NEXTHOPIP"
    echo "  next hop mac = $NEXTHOPMAC"

    modprobe pktgen

    pgset kpktgend_0 "rem_device_all"
    pgset kpktgend_0 "add_device $DEVICE"
    #pgset kpktgend_0 "max_before_softirq 10000"

    pgset $DEVICE "count $PACKET_COUNT"
    pgset $DEVICE "clone_skb 1"
    pgset $DEVICE "pkt_size $((PACKET_SIZE - 4))"
    pgset $DEVICE "delay 0"
    pgset $DEVICE "dst_mac $NEXTHOPMAC"
    pgset $DEVICE "dst $IP_DST"
    pgset $DEVICE "udp_dst_min 5000"
    pgset $DEVICE "udp_dst_min 5000"

    status
}

start() {

    LENGTH=$1
    if [ "x$LENGTH" == "x" ] ; then
        echo "error, must have a length"
        exit 1
    fi

    echo "sleeping ${DELAY_BEFORE_START}s before starting pktgen..."
    sleep $DELAY_BEFORE_START
    echo "...done"

    echo "starting pktgen..."
    pgset pgctrl "start" &
    SUBPID=$!
    echo "...pktgen starting, pid = $SUBPID"
    sleep 1
    status

    echo "sleeping ${LENGTH}s before stopping pktgen..."
    sleep $(( $LENGTH - 1 ))
    echo "killing $SUBPID..."
    kill $SUBPID
    echo "...done"
    sleep 1
    status
}

case "$1" in
    config)
        if [ "$#" != "2" ] ; then
            usage ; exit 1
        fi
        config $2
        ;;
    start)
        if [ "$#" != "2" ] ; then
            usage ; exit 1
        fi
        start $2
        ;;
    *)
        usage
        exit 1
        ;;
esac

exit 0
