#!/usr/bin/env python

from __future__ import with_statement
import optparse, glob, os, sys, re, fileinput

parser = optparse.OptionParser(
    usage = "usage: %prog <log dir>")
(options, args) = parser.parse_args()
if len(args) != 1:
    parser.print_help()
    sys.exit(1)

log_dir = args[0]
results = dict() # dict with:
                 # key = packet_size
                 # value = dict with
                 #   key = num pktgen sources
                 #   value is [
                 #     router bandwidth,
                 #     snf bandwidth,
                 #     snf dropped total,
                 #     snf dropped nic,
                 #     snf dropped ring,
                 #     snf dropped bad
                 #   ]

results_file = os.path.join(log_dir, "results.dat")
gnuplot_script = os.path.join(log_dir, "gen_graphs.gnuplot")

for xp in glob.glob(os.path.join(log_dir, '*_sources-*_packet_size')):
    num_sources = int(re.search('/(\d+)_sources', xp).group(1))
    packet_size = int(re.search('-(\d+)_packet_size', xp).group(1))
    capture_log = os.path.join(xp, 'capture.log')
    router_log =  os.path.join(xp, 'router.log')

    if not os.path.isfile(capture_log) or not os.path.isfile(router_log):
        print "warning: incomplete log in %s" % xp
        continue

    router_bps = 0
    snf_dropped_total = 0
    snf_dropped_nic = 0
    snf_dropped_ring = 0
    snf_dropped_bad = 0

    # parse sniffer10g stats
    bps_list = []
    for line in fileinput.input([capture_log]):
        mo = re.search(' (\d+\.\d+) bps$',line)
        if mo:
            bps_list.append(float(mo.group(1)))
        mo = re.search('^Dropped, total:\s+(\d+)$', line)
        if mo:
            snf_dropped_total = int(mo.group(1))
        mo = re.search('^Dropped, NIC overflow:\s+(\d+)$', line)
        if mo:
            snf_dropped_nic = int(mo.group(1))
        mo = re.search('^Dropped, ring overflow:\s+(\d+)$', line)
        if mo:
            snf_dropped_ring = int(mo.group(1))
        mo = re.search('^Dropped, bad:\s+(\d+)$', line)
        if mo:
            snf_dropped_bad = int(mo.group(1))
    # remove first and last bps measure
    del bps_list[0]
    del bps_list[-1]
    snf_avg_bps = sum(bps_list, 0.0) / len(bps_list)

    # parse router stats
    for line in fileinput.input([router_log]):
        mo = re.search('bandwidth bits/s = (\d+\.\d+)', line)
        if mo:
            router_bps = float(mo.group(1))

    # print report
    if not results.has_key(packet_size):
        results[packet_size] = dict()
    results[packet_size][num_sources] = [router_bps,
                                         snf_avg_bps,
                                         snf_dropped_total,
                                         snf_dropped_nic,
                                         snf_dropped_ring,
                                         snf_dropped_bad ]

with open(results_file, "w") as f:
    for packet_size in sorted(results.keys()):
        print >> f, '# packet size %i' % packet_size
        print >> f, '# "num sources" "router bandwidth" "snf bandwidth" "snf dropped total" "snf dropped nic" "snf dropped ring" "snf dropped bad"'
        for num_sources in sorted(results[packet_size].keys()):
            print >> f, '  %13G %18G %15G %19G %17G %18G %16G' % (num_sources,
                                                                  results[packet_size][num_sources][0],
                                                                  results[packet_size][num_sources][1],
                                                                  results[packet_size][num_sources][2],
                                                                  results[packet_size][num_sources][3],
                                                                  results[packet_size][num_sources][4],
                                                                  results[packet_size][num_sources][5])
        print >> f

gnuplot_data_file = os.path.basename(results_file)
with open(gnuplot_script, "w") as f:
    print >> f, "# gnuplot script"
    print >> f
    print >> f, 'set terminal png'
    print >> f, 'set key top left'
    print >> f, 'set border 0'
    print >> f, 'set grid'
    print >> f
    for (packet_size_index, packet_size) in enumerate(sorted(results.keys())):
        print >> f, 'set title "dropped packets in relation to bandwidth for packets of size %i"' % packet_size
        print >> f, 'set output "dropped.packet_size_%i.png"' % packet_size
        print >> f, 'set xlabel "router bandwidth (bps)"'
        print >> f, 'set ylabel "num dropped"'
        print >> f, 'plot ',
        print >> f, '"%s" every :::%i::%i using 2:5 title "dropped, nic overflow" with points,' % (gnuplot_data_file,
                                                                                                   packet_size_index,
                                                                                                   packet_size_index),
        print >> f, '"%s" every :::%i::%i using 2:6 title "dropped, ring overflow" with points,' % (gnuplot_data_file,
                                                                                                    packet_size_index,
                                                                                                    packet_size_index),
        print >> f, '"%s" every :::%i::%i using 2:7 title "dropped, bad packets" with points' % (gnuplot_data_file,
                                                                                                 packet_size_index,
                                                                                                 packet_size_index)
        print >> f
        print >> f, 'set title "bandwidth in relation to num pktgen senders for packets of size %i"' % packet_size
        print >> f, 'set output "bandwidth.packet_size_%i.png"' % packet_size
        print >> f, 'set xlabel "num pktgen senders"'
        print >> f, 'set ylabel "bandwidth"'
        print >> f, 'plot ',
        print >> f, '"%s" every :::%i::%i using 1:2 title "router measured bandwidth" with linespoints,' % (gnuplot_data_file,
                                                                                                            packet_size_index,
                                                                                                            packet_size_index),
        print >> f, '"%s" every :::%i::%i using 1:3 title "sniffer10g handled bandwidth" with linespoints' % (gnuplot_data_file,
                                                                                                              packet_size_index,
                                                                                                              packet_size_index)
        print >> f
