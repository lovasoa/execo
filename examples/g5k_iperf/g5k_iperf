#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this example can only be run in grid5000. You need to have at least
# one oargrid reservation

# there are lines commented, to also run a traffic capture with the
# metroflux server

import execo, execo_g5k, logging

execo.set_log_level(logging.INFO)

jobs = execo_g5k.get_current_oargrid_jobs()

my_connexion_params = {'user': 'root'}
(deployed_hosts, error_hosts, all_hosts) = execo_g5k.prepare_deployed_xp(oargrid_job_ids = jobs, connexion_params = my_connexion_params)

hosts_lyon = [ host for host in deployed_hosts if host.address.find(".lyon.") > -1 ]
hosts_other = [ host for host in deployed_hosts if host.address.find(".lyon.") == -1 ]
#metroflux10g = execo.Host('metroflux')

if len(hosts_lyon) == 0 or len(hosts_other) == 0:
    raise Exception, "not enough hosts"

servers = execo.Remote(hosts_other, "killall iperf ; iperf -s", connexion_params = my_connexion_params, ignore_exit_code = True)
clients = execo.Remote(hosts_lyon, "iperf -c {{[host.address for host in hosts_other]}}", connexion_params = my_connexion_params)

#begin_capture = execo.Remote((metroflux10g,), "/opt/metroflux/bin/capture start")
#end_capture = execo.Remote((metroflux10g,), "/opt/metroflux/bin/capture stop")

servers.start()
execo.sleep(2)
#begin_capture.run()
clients.run()
#end_capture.run()
servers.kill()
servers.wait()

#report = execo.Report((servers, clients, begin_capture, end_capture), name = "iperf on g5k")
report = execo.Report((servers, clients), name = "iperf on g5k")
print report.output()
