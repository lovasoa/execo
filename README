********************************************
Readme / documentation for the execo package
********************************************

Execo offers a Python API for local or remote, standalone or parallel,
processes execution. It is especially well suited for scripting
workflows of parallel/distributed operations on local or remote hosts:
automate a scientific workflow, conducting computer science
experiments, performing automated tests, etc. The core python package
is ``execo``. The ``execo_g5k`` package provides a set of tools and
extensions for Grid5000. The ``execo_engine`` package and
``execo-run`` script provide an extendable experiment engine.

license
=======

Execo is copyright INRIA Rhone-Alpes, Service Experimentation et
Developpement.

Execo is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.

Execo is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with Execo.  If not, see <http://www.gnu.org/licenses/>

versions
========

latest stable version: v2.1 (2013-01-31)

installation instructions
=========================

links
-----

- home page:  http://execo.gforge.inria.fr

- project page on INRIA Forge: http://gforge.inria.fr/projects/execo/

- package download: http://execo.gforge.inria.fr/downloads or
  https://gforge.inria.fr/frs/?group_id=2901

- code repository: git://scm.gforge.inria.fr/execo/execo.git

- bug tracker: http://bugzilla.inria.fr - product: execo

- tutorial: http://execo.gforge.inria.fr/doc/tutorial.html

- documentation: http://execo.gforge.inria.fr/doc/

- contribs:
  https://gforge.inria.fr/plugins/scmgit/cgi-bin/gitweb.cgi?p=execo/execo.git;a=tree;f=contrib

platforms
---------

- works on linux (primary development platform), darwin (macosx)

- should work on bsd (not tested)

- don't know on windows or cygwin (not tested)

prerequisites
-------------

execo installation requires make, python (>= 2.6), python-httplib2 and
optionnaly python-keyring.

building the documentation requires sphinx, graphviz and optionnaly
epydoc.

At runtime, connecting to remote hosts requires ssh, scp or similar
connection tools, and optionnaly taktuk (probably version >=
3.6. http://taktuk.gforge.inria.fr/). ChainPut requires bourne shell
and netcat on remote hosts.

installation
------------

makefile targets:

- build

- install. Pass option PREFIX=... for installing in a non-default
  location (default PREFIX is /usr/local). Pass option PYTHON to use
  an explicit python interpreter (default is python).

- doc: to build sphinx documentation

- epydoc: to build epydoc documentation

- check: to run unittests and doctests

- clean

- dist: to create the execo package in dist/

For execo to work correctly, if installed in $PREFIX (and if $PREFIX
is not a standard location such as /usr), $PREFIX/bin needs to be on
the PATH, and python install path under $PREFIX needs to be on python
search path:

 $ export PATH="$PREFIX/bin${PATH:+:${PATH}}"
 $ PYTHONHOMEPATH="$PREFIX/"$(python -c "import sys,os; print os.sep.join(['lib', 'python' + sys.version[:3], 'site-packages'])")
 $ export PYTHONPATH="$PYTHONHOMEPATH${PYTHONPATH:+:${PYTHONPATH}}"

usage
=====

See html documentation for module execo and execo_g5k at
http://execo.gforge.inria.fr/doc/

how to contribute
=================

- indent with spaces, not tabs. one level of indentation is four
  spaces (if needed: use ``reindent.py -rnv .`` in execo top
  directory)

- stay consistent with the coding and naming style

- use the core systems provided (eg. the configuration system, the tty
  coloring system, the logger, etc.) instead of developing your own.

- ask a core developer before adding a dependency

- provide documented code (internal documentation as well as user
  documentation where needed)

- recommended commit messages format:

  ``[<module_name>] <category>: commit message``.

  - <module_name> can be execo, execo_g5k, execo_engine. Omit if
    commit is not specific to a module.

  - <category> is free form but should indicate which part(s) of the
    module the commit affects. Omit if a commit is not specific to a
    module part.
